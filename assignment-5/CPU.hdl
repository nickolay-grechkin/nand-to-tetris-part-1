// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Check if op code is 0
    Not(in=instruction[15], out=aRegisterOpCode);
    // If op code is 0 or A destination bit is 1 load value to A register, otherwise no
    Or(a=aRegisterOpCode, b=instruction[5], out=isLoadToARegister);
    And(a=instruction[5], b=instruction[15], out=loadInstruction);
    // If A destination bit is 1 load value from ALU output, otherwise load from instruction input
    Mux16(a=instruction, b=outALU, sel=loadInstruction, out=valueToLoadToARegister);
    // Load value to a register
    ARegister(in=valueToLoadToARegister, load=isLoadToARegister, out=aRegisterValue, out[0..14]=addressM);
    // Load to ALU value from A register or from M input depending on the value of a bit instruction
    Mux16(a=aRegisterValue, b=inM, sel=instruction[12], out=outMorA);

    // If D destination bit is 1 load value from ALU out
    Mux(a=false, b=instruction[4], sel=instruction[15], out=loadD);
    DRegister(in=outALU, load=loadD, out=dRegisterValue);

    // Return writeW in if is not value in address input
    And(a=instruction[3], b=instruction[15], out=writeM);

    ALU(x=dRegisterValue, y=outMorA, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, out=outM, zr=zr, ng=ng);
    
    Not(in=zr, out=aluOutNotZero);
    Not(in=ng, out=aluOutNotNegative);
    // If ALU output <0, =0, <=0 go to next instruction cases covered - 3
    And(a=instruction[1], b=zr, out=jumpZero);
    And(a=instruction[2], b=ng, out=jumpNegative);
    // If all jump bits true - unconditional jump cases covered 1
    And(a=instruction[0], b=instruction[1], out=jump3And2);
    And(a=jump3And2, b=instruction[2], out=jumpUnconditional);

    // If out is not negative cases covered - 1
    And(a=aluOutNotNegative, b=aluOutNotZero, out=moreThanZero);
    And(a=moreThanZero, b=instruction[0], out=jumpNotNegative);
    // If out is not zero cases covered - 1
    Or(a=jumpNegative, b=jumpNotNegative, out=jumpNotZero);
    Or8Way(in[0]=jumpZero, in[1]=jumpNegative, in[2]=jumpUnconditional, in[3]=jumpNotNegative, in[4]=jumpNotZero, in[5..6]=false, out=isJumpHappen);
    
    Mux16(a[0]=false, b=aRegisterValue, sel=isJumpHappen, out=goToNextInstruction);

    Not(in=isJumpHappen, out=noJump);

    Or(a=noJump, b=aRegisterOpCode, out=increment);
    
    Not(in=increment, out=notIncrement);

    PC(in=goToNextInstruction, load=notIncrement, inc=increment, reset=reset, out[0..14]=pc);
}